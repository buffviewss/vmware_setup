#!/usr/bin/env bash
set -euo pipefail

# randomize-audio-persona.sh
# Ubuntu 24.04 (Wayland) â€” VMware guest
# Each run picks a *realistic* audio configuration (persona): sample-rate, buffer quantum,
# and human-looking device nick/description, writes PipeWire/WirePlumber overrides,
# restarts services, and prints a summary. Includes revert & deterministic seed.
#
# Usage:
#   sudo ./randomize-audio-persona.sh              # random persona
#   sudo ./randomize-audio-persona.sh --seed 123   # deterministic run
#   sudo ./randomize-audio-persona.sh --revert     # remove overrides
#   ./randomize-audio-persona.sh --vmx-suggestion  # print VMware .vmx audio options
#
# Notes:
# - This does NOT change VMware's audio model from the guest; it sets a realistic audio
#   environment inside Ubuntu so browsers compute a different WebAudio fingerprint.
# - Keep using your preferred sink; you can change default with `wpctl set-default` later.

PIPEWIRE_DIR="/etc/pipewire/pipewire.conf.d"
PIPEWIRE_FILE="${PIPEWIRE_DIR}/99-sample-rate.conf"
WP_DIR="/etc/wireplumber/main.lua.d"
WP_FILE="${WP_DIR}/51-alsa-rename.lua"

SEED=""

info() { echo -e "[+] $*"; }
warn() { echo -e "[!] $*" >&2; }
die()  { echo -e "[x] $*" >&2; exit 1; }

need_root() {
  if [[ "${EUID}" -ne 0 ]]; then
    echo "This command needs root. Re-run with: sudo $0 $*" >&2
    exit 1
  fi
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --revert) DO_REVERT="true"; shift;;
      --seed) SEED="$2"; shift 2;;
      --vmx-suggestion) DO_VMX_SUGGESTION="true"; shift;;
      -h|--help)
        cat <<'EOF'
Usage: sudo ./randomize-audio-persona.sh [--seed N] [--revert] [--vmx-suggestion]

Options:
  --seed N            Use a deterministic seed (same persona for same N)
  --revert            Remove overrides and restart services
  --vmx-suggestion    Show VMware .vmx options to change audio model (host-side)
  -h, --help          Show help
EOF
        exit 0
        ;;
      *)
        die "Unknown option: $1 (see --help)"
        ;;
    esac
  done
}

# Deterministic RNG based on $SEED or /dev/urandom fallback.
rand() {
  if [[ -n "${SEED}" ]]; then
    # xorshift32
    local -i x=$SEED
    x=$((x ^ (x << 13) & 0xFFFFFFFF))
    x=$((x ^ (x >> 17)))
    x=$((x ^ (x << 5) & 0xFFFFFFFF))
    SEED=$x
    echo $((x & 0x7FFFFFFF))
  else
    od -An -N4 -tu4 < /dev/urandom | tr -d ' '
  fi
}

pick() { # pick one item from args
  local n=$#
  local r=$(($(rand) % n + 1))
  eval "echo \${$r}"
}

ensure_packages() {
  info "Ensuring PipeWire/WirePlumber & ALSA tools are installed..."
  export DEBIAN_FRONTEND=noninteractive
  apt-get update -y
  apt-get install -y --no-install-recommends \
    pipewire pipewire-audio pipewire-pulse wireplumber libspa-0.2-modules alsa-utils
}

write_pipewire_conf() {
  local RATE="$1"
  local ALLOWED="$2"
  local QUANTUM="$3"
  local MINQ="$4"
  local MAXQ="$5"
  mkdir -p "${PIPEWIRE_DIR}"
  cat > "${PIPEWIRE_FILE}" <<EOF
# Generated by randomize-audio-persona.sh
context.properties = {
  default.clock.rate          = ${RATE}
  default.clock.allowed-rates = [ ${ALLOWED} ]
  default.clock.quantum       = ${QUANTUM}
  default.clock.min-quantum   = ${MINQ}
  default.clock.max-quantum   = ${MAXQ}
}
EOF
}

write_wireplumber_rule() {
  local NICK="$1"
  local DESC="$2"
  mkdir -p "${WP_DIR}"
  cat > "${WP_FILE}" <<EOF
-- Generated by randomize-audio-persona.sh
-- Rename ALSA devices to a plausible real model (affects UI / getUserMedia labels)
rule = {
  matches = { { { "device.api", "equals", "alsa" } } },
  apply_properties = {
    ["device.nick"] = "${NICK}",
    ["device.description"] = "${DESC}"
  }
}
alsa_monitor.rules = alsa_monitor.rules or {}
table.insert(alsa_monitor.rules, rule)
EOF
}

restart_user_services() {
  info "Restarting PipeWire & WirePlumber user services..."
  loginctl enable-linger "$SUDO_USER" >/dev/null 2>&1 || true
  sudo -u "$SUDO_USER" systemctl --user daemon-reload || true
  sudo -u "$SUDO_USER" systemctl --user restart pipewire pipewire-pulse wireplumber || true
}

revert_all() {
  info "Reverting overrides..."
  rm -f "${PIPEWIRE_FILE}" "${WP_FILE}"
  restart_user_services
  info "Done. System back to defaults."
}

print_summary() {
  echo "-------------------------------------------------------------"
  echo " Randomized audio persona applied"
  echo "-------------------------------------------------------------"
  echo " Persona:        $1"
  echo " Sample-rate:    $2"
  echo " Allowed rates:  $3"
  echo " Quantum:        $4 (min $5 / max $6)"
  echo " Nick:           $7"
  echo " Description:    $8"
  echo "-------------------------------------------------------------"
  echo "Tip: open your browser and test Audio fingerprint again."
  echo "    - To list sinks/sources: wpctl status | sed -n '/Audio/,/Video/p'"
  echo "    - To set default sink:   wpctl set-default <ID-or-Name>"
  echo "    - Revert:                sudo $0 --revert"
}

print_vmx_suggestion() {
  cat <<'EOF'
---- VMware .vmx audio options (edit on HOST, VM OFF) ----
sound.present = "TRUE"
sound.autodetect = "TRUE"
sound.virtualDev = "hdaudio"   # Intel HD Audio (modern, natural on Linux)
# sound.virtualDev = "es1371"  # Ensoniq AudioPCI (older, very different pipeline)
# sound.virtualDev = "sb16"    # Sound Blaster 16 (legacy, not recommended)
# Optional: passthrough a real USB audio device
# usb.autoConnect.device0 = "vid:0d8c pid:013c"  # C-Media example
EOF
}

main() {
  DO_REVERT="false"
  DO_VMX_SUGGESTION="false"
  parse_args "$@"

  if [[ "${DO_VMX_SUGGESTION}" == "true" ]]; then
    print_vmx_suggestion
    exit 0
  fi

  if [[ "${DO_REVERT}" == "true" ]]; then
    need_root
    revert_all
    exit 0
  fi

  need_root
  ensure_packages

  # === Persona pools (realistic names & params) ===
  # Sample-rates: prefer 48000 on Linux; 44100 common on Windows/USB headsets
  RATES=("48000" "44100")
  ALLOWED_OPTS=("48000 44100" "44100 48000")
  QUANTA=("512" "1024" "2048")

  # Plausible device labels (nick,desc)
  # format: NICK|DESC
  PERSONA_LABELS=(
    "Realtek ALC887|Realtek ALC887 HD Audio"
    "Realtek ALC892|Realtek ALC892 HD Audio"
    "Realtek ALC897|Realtek ALC897 HD Audio"
    "HDA Intel PCH|Built-in Audio HD (PCH)"
    "AMD Family 17h HD Audio|AMD High Definition Audio Controller"
    "USB Audio|C-Media USB Headset"
    "Plantronics Blackwire 3220|Plantronics Blackwire 3220 Headset"
    "Jabra Evolve 20|Jabra Evolve 20 USB"
  )

  # === Random picks ===
  RATE="$(pick "${RATES[@]}")"
  ALLOWED="$(pick "${ALLOWED_OPTS[@]}")"
  QUANTUM="$(pick "${QUANTA[@]}")"

  # min/max quantum stay reasonable around chosen quantum
  case "${QUANTUM}" in
    512)  MINQ=256; MAXQ=1024;;
    1024) MINQ=512; MAXQ=2048;;
    2048) MINQ=512; MAXQ=4096;;
    *)    MINQ=512; MAXQ=2048;;
  esac

  # Pick a label
  label="$(pick "${PERSONA_LABELS[@]}")"
  NICK="${label%%|*}"
  DESC="${label#*|}"

  # Apply configs
  write_pipewire_conf "${RATE}" "${ALLOWED}" "${QUANTUM}" "${MINQ}" "${MAXQ}"
  write_wireplumber_rule "${NICK}" "${DESC}"
  restart_user_services

  # Print a short report
  print_summary "auto" "${RATE}" "${ALLOWED}" "${QUANTUM}" "${MINQ}" "${MAXQ}" "${NICK}" "${DESC}"
}

main "$@"
