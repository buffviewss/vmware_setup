#!/usr/bin/env bash
# audiofp-persist.sh
# Ubuntu 24.04 (Wayland) + PipeWire/WirePlumber
# Random hóa cấu hình audio "thật", giữ bền vững để dùng lâu dài với Chrome.

set -euo pipefail

# ====== TÙY CHỌN ======
STATE_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/audiofp"
CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
PW_DROPIN_DIR="$CONF_DIR/pipewire/pipewire.conf.d"
WP_DROPIN_DIR="$CONF_DIR/wireplumber/wireplumber.conf.d"
SYSD_USER_DIR="$CONF_DIR/systemd/user"
BIN_DIR="$HOME/.local/bin"

SERVICE_NAME="audiofp-virtual-sink.service"
HELPER="$BIN_DIR/audiofp-ensure-vsink.sh"
PW_DROPIN_FILE="$PW_DROPIN_DIR/70-audiofp.conf"
WP_DROPIN_FILE="$WP_DROPIN_DIR/70-audiofp-defaults.conf"

mkdir -p "$STATE_DIR" "$PW_DROPIN_DIR" "$WP_DROPIN_DIR" "$SYSD_USER_DIR" "$BIN_DIR"

# Profile "đời thực"
SAMPLE_RATES=(44100 48000 88200 96000)
QUANTUMS=(128 256 512 1024)
FORMATS=(S16LE S24LE F32LE)             # PipeWire dùng F32LE nội bộ; đặt ở đây để tham khảo
CHANNELS=(1 2)
DESCRIPTIONS=(
  "Realtek ALC887 Analog"
  "Realtek ALC892 Analog"
  "Intel HDA PCH Analog"
  "Intel Smart Sound Technology"
  "AMD HDMI Audio"
  "Cirrus Logic CS4208 Analog"
  "NVIDIA HDMI Audio"
)

rand_from() { local -n a=$1; echo "${a[$((RANDOM % ${#a[@]}))]}"; }

need() { command -v "$1" >/dev/null 2>&1 || { echo "Thiếu lệnh: $1"; exit 1; }; }

ensure_deps() {
  need pw-metadata
  need wpctl
  need pactl
  need systemctl
}

pick_real_sink() {
  # Chọn master sink phần cứng hiện có (không lấy sink ảo)
  # Ưu tiên alsa_output.* hoặc bluez_output.*
  local s
  s=$(pactl list short sinks | awk '{print $2}' | grep -E '^(alsa_output|bluez_output)\.' | head -n1 || true)
  if [[ -z "${s:-}" ]]; then
    # fallback: lấy sink mặc định hiện tại (nếu là phần cứng)
    s=$(pactl info | awk -F': ' '/Default Sink:/{print $2}')
  fi
  echo "$s"
}

write_pw_dropin() {
  local rate="$1" quantum="$2"
  # Ghi drop-in PipeWire: cố định clock rate/quantum (bền vững, áp dụng sau restart pipewire)
  cat > "$PW_DROPIN_FILE" <<EOF
# Auto-generated by audiofp-persist
context.properties = {
    default.clock.rate          = $rate
    default.clock.allowed-rates = [ $rate ]   # giữ ổn định để fingerprint nhất quán
    default.clock.quantum       = $quantum
    default.clock.min-quantum   = 64
    default.clock.max-quantum   = 2048
}
EOF
}

write_wp_dropin() {
  # Bật cơ chế WirePlumber lưu/khôi phục default sink bền vững
  cat > "$WP_DROPIN_FILE" <<'EOF'
# Auto-generated by audiofp-persist
wireplumber.settings = {
  node.restore-default-targets = true
}
EOF
}

write_helper_script() {
  local vsink_name="$1" desc="$2"
  cat > "$HELPER" <<EOF
#!/usr/bin/env bash
set -euo pipefail
# Helper: tạo virtual sink gắn vào thiết bị thật và đặt làm default (chạy mỗi login)
VSINK="$vsink_name"
DESC="$desc"

# Unload các module cũ do script tạo
pactl list short modules | awk '/audiofp_vsink|module-virtual-sink/ {print \$1}' | xargs -r -n1 pactl unload-module || true

# Tìm master phần cứng
MASTER=\$(pactl list short sinks | awk '{print \$2}' | grep -E '^(alsa_output|bluez_output)\\.' | head -n1)
if [[ -z "\${MASTER:-}" ]]; then
  # fallback: nếu không có thì thôi, đừng tạo vsink (tránh mất âm thanh)
  exit 0
fi

# Tạo virtual sink nối về master (nghe được âm thanh thật)
pactl load-module module-virtual-sink "sink_name=\$VSINK sink_properties=node.description='\$DESC' master=\$MASTER channels=2 channel_map=front-left,front-right" >/dev/null

# Đặt default sink về virtual sink
pactl set-default-sink "\$VSINK" || true

# Lưu default targets để WirePlumber khôi phục về sau
wpctl settings --save node.restore-default-targets true >/dev/null 2>&1 || true
EOF
  chmod +x "$HELPER"
}

write_systemd_service() {
  cat > "$SYSD_USER_DIR/$SERVICE_NAME" <<EOF
[Unit]
Description=AudioFP Virtual Sink (persistent)
After=pipewire.service wireplumber.service pipewire-pulse.service
Wants=pipewire.service wireplumber.service pipewire-pulse.service

[Service]
Type=oneshot
ExecStart=$HELPER
RemainAfterExit=yes

[Install]
WantedBy=default.target
EOF
}

apply_profile() {
  ensure_deps
  local rate quantum ch desc vsink
  rate="$(rand_from SAMPLE_RATES)"
  quantum="$(rand_from QUANTUMS)"
  ch="$(rand_from CHANNELS)"
  # Mô tả "đời thật"
  desc="$(rand_from DESCRIPTIONS)"
  vsink="audiofp_vsink_${rate}_${RANDOM}"

  # Ghi configs
  write_pw_dropin "$rate" "$quantum"
  write_wp_dropin
  write_helper_script "$vsink" "$desc"
  write_systemd_service

  # Reload & enable service
  systemctl --user daemon-reload
  systemctl --user enable --now "$SERVICE_NAME"

  # Restart PipeWire/WirePlumber để drop-in có hiệu lực
  systemctl --user restart pipewire pipewire-pulse wireplumber

  # Chạy helper lần nữa (sau restart) để chắc chắn default sink là vsink
  "$HELPER" || true

  # Lưu trạng thái
  {
    echo "rate=$rate"
    echo "quantum=$quantum"
    echo "channels=$ch"
    echo "description=$desc"
    echo "vsink=$vsink"
  } > "$STATE_DIR/last_profile.conf"

  echo ">> ĐÃ ÁP DỤNG profile: rate=${rate} Hz, quantum=${quantum}, desc='${desc}', vsink='${vsink}'"
  echo ">> Mở lại Chrome/Chromium để context mới nhận sample rate mới."
}

rotate_profile() {
  # Giữ service, chỉ thay profile (giống apply nhưng không enable lại)
  apply_profile
}

revert_all() {
  echo ">> Gỡ cấu hình AudioFP và trả về mặc định…"
  systemctl --user stop "$SERVICE_NAME" 2>/dev/null || true
  systemctl --user disable "$SERVICE_NAME" 2>/dev/null || true
  rm -f "$SYSD_USER_DIR/$SERVICE_NAME" "$HELPER"

  # Xóa drop-in
  rm -f "$PW_DROPIN_FILE" "$WP_DROPIN_FILE"

  # Unload các module ảo còn lại
  pactl list short modules | awk '/audiofp_vsink|module-virtual-sink/ {print $1}' | xargs -r -n1 pactl unload-module || true

  # Bỏ ép rate/quantum ở runtime (phòng khi có metadata tồn tại)
  pw-metadata -n settings 0 clock.force-rate 0  >/dev/null 2>&1 || true
  pw-metadata -n settings 0 clock.force-quantum 0 >/dev/null 2>&1 || true

  # Restart lại stack
  systemctl --user restart pipewire pipewire-pulse wireplumber

  echo ">> DONE. Hệ thống âm thanh đã về mặc định."
}

status() {
  echo "=== PipeWire clock (pw-metadata) ==="
  pw-metadata -n settings 0 | sed 's/^/  /'
  echo
  echo "=== Default sink ==="
  pactl info | grep 'Default Sink' || true
  echo
  echo "=== Sinks hiện có ==="
  pactl list short sinks | sed 's/^/  /'
  echo
  echo "=== Profile gần nhất ==="
  [[ -f "$STATE_DIR/last_profile.conf" ]] && sed 's/^/  /' "$STATE_DIR/last_profile.conf" || echo "  (chưa có)"
}

usage() {
  cat <<EOF
Usage:
  $0 apply     # Random profile thật + ghi cấu hình bền vững (qua reboot/login)
  $0 rotate    # Giống apply (đổi profile mới)
  $0 status    # Xem trạng thái
  $0 revert    # Gỡ cấu hình và trả về mặc định
EOF
}

cmd="${1:-}"
case "$cmd" in
  apply)  apply_profile ;;
  rotate) rotate_profile ;;
  status) status ;;
  revert) revert_all ;;
  *)      usage; exit 1 ;;
esac
